import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import { Localize, LocalizedLink } from 'components/localization'
import { Header } from 'components/elements'
import device from 'themes/device'
import IndividualIcon from 'images/svg/signup-affiliates/individual.svg'
import BusinessIcon from 'images/svg/signup-affiliates/company.svg'
import Revenue from 'images/svg/signup-affiliates/revenue.svg'
import Turnover from 'images/svg/signup-affiliates/turnover.svg'
import CPA from 'images/svg/signup-affiliates/cpa.svg'
import Selected from 'images/svg/signup-affiliates/selected.svg'
import { TString } from 'types/generics'

type CardProps = {
    icon?: string
    title?: TString
    description?: TString
    selected?: boolean
    value?: string
    onClick?: (e) => void
}
type AccountTypeProps = {
    updateData: (e) => void
    card_selected: { type: string; plan: string }
    onValidate: (e) => void
}

const StyledCard = styled.div<{ selected: boolean }>`
    display: flex;
    align-items: center;
    inline-size: 400px;
    padding-left: 24px;
    margin-bottom: 8px;
    position: relative;
    background: #f3f7f7;
    height: 80px;
    border: ${({ selected }) => (selected ? '1px solid #aad2d8' : '1px solid #ffffff')};
    border-radius: 8px;
    cursor: pointer;

    @media ${device.tablet} {
        inline-size: 328px;
    }
`

const Icon = styled.img`
    width: 48px;
    height: 48px;
`

const Content = styled.div`
    display: flex;
    flex-direction: column;
    padding-left: 12px;
`

const Title = styled.h3`
    font-size: 16px;
    font-weight: 700;
    line-height: 24px;
`

const Description = styled.p`
    font-size: 12px;
    line-height: 18px;
`
const SelectedIcon = styled.img`
    position: absolute;
    top: 16px;
    right: 16px;
    width: 16px;
    height: 16px;
`
const MainWrapper = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
`

export const StyledLink = styled(LocalizedLink)`
    color: var(--color-red);
    text-decoration: none;
    z-index: 10;
`
const SecondPart = styled.div<{ is_disabled?: boolean }>`
    opacity: ${({ is_disabled }) => (is_disabled ? 0.32 : 1)};
    pointer-events: ${({ is_disabled }) => is_disabled && 'none'};
`

const Card = ({ icon, title, description, selected, value, onClick }: CardProps) => {
    const [is_selected, setIsSelected] = useState(false)
    const clickHandler = () => {
        setIsSelected(true)
        onClick && onClick(value)
    }

    React.useEffect(() => {
        setIsSelected(selected)
    }, [selected])

    return (
        <StyledCard selected={is_selected} onClick={clickHandler}>
            <Icon src={icon} alt={title} />
            <Content>
                <Title>
                    <Localize translate_text={title} />
                </Title>
                <Description>
                    <Localize
                        translate_text={description}
                        components={[
                            <StyledLink
                                external
                                to={'/partners/affiliate-ib/'}
                                key={0}
                                target="_blank"
                            />,
                        ]}
                    />
                </Description>
            </Content>
            {is_selected ? <SelectedIcon src={Selected} alt="selected" /> : <></>}
        </StyledCard>
    )
}

const cards: CardProps[] = [
    {
        value: 'Individual',
        icon: IndividualIcon,
        title: '_t_Individual_t_',
        description: '_t_Register for a individual account_t_',
    },
    {
        value: 'Legal entity',
        icon: BusinessIcon,
        title: '_t_Legal entity_t_',
        description: '_t_Register for a business or corporate accoubnt_t_',
    },
]
const plans: CardProps[] = [
    {
        value: 'Revenue share',
        icon: Revenue,
        title: '_t_Revenue share_t_',
        description:
            '_t_Earn based on the monthly net revenue generated by your client. <0>Learn more</>_t_',
    },
    {
        value: 'Turnover',
        icon: Turnover,
        title: '_t_Turnover_t_',
        description:
            "_t_Earn based on each contract's payout probability or client's trade. <0>Learn more</>_t_",
    },
    {
        value: 'CPA (EU only)',
        icon: CPA,
        title: '_t_CPA (EU only)_t_',
        description: '_t_Earn based on each successful referral. <0>Learn more</>_t_',
    },
]
const AccountType = ({ updateData, card_selected, onValidate }: AccountTypeProps) => {
    const [selected_items, setSelectedItems] = useState(card_selected)

    const validate = selected_items.type && selected_items.plan

    useEffect(() => {
        onValidate(validate)
    }, [onValidate, selected_items])

    useEffect(() => {
        updateData(selected_items)
    }, [selected_items])

    return (
        <MainWrapper>
            <Header align="center" type="paragraph-1" pb="8px" weight="normal">
                <Localize
                    translate_text={'_t_Choose which plan you would like to subscribe to:_t_'}
                />
            </Header>
            {cards.map(({ value, icon, title, description }) => {
                return (
                    <Card
                        key={value}
                        icon={icon}
                        title={title}
                        description={description}
                        selected={selected_items.type == value}
                        onClick={() => {
                            setSelectedItems({ ...selected_items, type: value })
                        }}
                    />
                )
            })}
            <SecondPart is_disabled={selected_items.type == ''}>
                <Header align="center" type="paragraph-1" pb="8px" weight="normal">
                    <Localize
                        translate_text={'_t_Choose which plan yo would like to subscribe to_t_'}
                    />
                </Header>
                {plans.map(({ value, icon, title, description }) => {
                    return (
                        <Card
                            key={value}
                            icon={icon}
                            title={title}
                            description={description}
                            selected={selected_items.plan == value}
                            onClick={() => {
                                setSelectedItems({ ...selected_items, plan: value })
                            }}
                        />
                    )
                })}
            </SecondPart>
        </MainWrapper>
    )
}
export default AccountType
